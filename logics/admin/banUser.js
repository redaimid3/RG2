const util = require('../../another/util')
const keyboards = require('../../another/keyboards')
const { Keyboard } = require('vk-io')
const config = require('../../cloud/config')
module.exports = async function(player, vk, context) {
if(context.messagePayload && context.messagePayload.command == "admin_ban") {
	if(!config.globalAdmins.includes(context.senderId)) return;
	let link = await context.question({
                    message: `‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:`,
                     keyboard: Keyboard.builder()
                        .textButton({
                            label: `–û—Ç–º–µ–Ω–∞`,
                            color: 'negative',
                            payload: {
                                command: "changeCancel"
                            }
                        }).inline()
                    })
                    if(link.text == '–û—Ç–º–µ–Ω–∞'){
						return context.send({
							message: `‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ–Ω—ë–Ω–∞, –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.`,
           				 keyboard: keyboards.main_menu
        				});
        			}
        		if(link.messagePayload ) {
					return context.send({
            			message: `‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.`,
            			keyboard: keyboards.main_menu
       			 });
       		}
        		if(util.checkLink(link.text) != true ) {
            		return context.send({
                		message: `‚ùå –°—Å—ã–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ.`,
               		 keyboard: keyboards.main_menu
            		});
        		}
       const data = link.text.split('com/')
       await vk.api.users.get({
            user_ids: data[1]
        }).then(async(response) => {
            if(!player.playersData[response[0].id]) {
                return context.send({
                    message: `‚ùå –î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`,
                    keyboard: keyboards.main_menu
                });
            }
        player.playersData[response[0].id].banned = true
		await vk.api.messages.send({
			message: `‚õî –í–∞–º –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤ –∏–≥—Ä–æ–≤–æ–º –±–æ—Ç–µ.\n–í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.`,
			user_id: response[0].id,
			random_id: 0
		}).catch((err) => {
                  return context.send(`‚ùå –û—à–∏–±–∫–∞ VK Api`)
        });
		return context.send(`‚úÖ –ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.`);
	});
}
if(context.messagePayload && context.messagePayload.command == "admin_unban") {
	if(!config.globalAdmins.includes(context.senderId)) return;
				let link = await context.question({
                    message: `‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:`,
                     keyboard: Keyboard.builder()
                        .textButton({
                            label: `–û—Ç–º–µ–Ω–∞`,
                            color: 'negative',
                            payload: {
                                command: "changeCancel"
                            }
                        }).inline()
                    });
                    if(link.text == '–û—Ç–º–µ–Ω–∞'){ 
						return context.send({
							message: `‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ–Ω—ë–Ω–∞, –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.`,
            				keyboard: keyboards.main_menu
        				});
        			}
        			if(link.messagePayload ) {
						return context.send({
            				message: `‚ùå –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.`,
            				keyboard: keyboards.main_menu
        				});
        			}
        			if(util.checkLink(link.text) != true ) {
            			return context.send({
                			message: `‚ùå –°—Å—ã–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ.`,
                			keyboard: keyboards.main_menu
            			});
        			}
       const data = link.text.split('com/');
       await vk.api.users.get({
            user_ids: data[1]
        }).then(async(response) => {
            if(!player.playersData[response[0].id]) {
                return context.send({
                    message: `‚ùå –î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`,
                    keyboard: keyboards.main_menu
                });
            }
    player.playersData[response[0].id].banned = false
	await vk.api.messages.send({
		message: `üéä –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–æ–≤–æ–º –±–æ—Ç–µ.\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è!`,
		user_id: response[0].id,
		random_id: 0
	}).catch((err) => {
            return context.send(`‚ùå –û—à–∏–±–∫–∞ VK Api`)
    });
	return context.send(`‚úÖ –ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.`);
});
	}
}