const util = require('../../another/util')
const { Keyboard } = require('vk-io')
module.exports = async function(game, context, player) {
if(!context.text) return
if(context.text == 'help' && context.isChat || context.text == 'Help' && context.isChat) {
	if(context.senderId == game.gamesData[context.peerId].convOwner){
        return context.send({
            message: `–ö–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —á–∞—Å—Ç–Ω—ã—Ö –±–µ—Å–µ–¥:\n\nHelp - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\nStats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ—Å–µ–¥—ã\nTimer [–≤—Ä–µ–º—è] - —Å–º–µ–Ω–∞ —Ç–∞–π–º–µ—Ä–∞ –∏–≥—Ä—ã (–¥–æ—Å—Ç—É–ø–Ω–æ –æ—Ç 1 –¥–æ 120 —Å–µ–∫—É–Ω–¥)\nGame [—Ä–µ–∂–∏–º] - —Å–º–µ–Ω–∞ –∏–≥—Ä–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–¥–æ—Å—Ç—É–ø–Ω–æ: wheel, under_7_over, dream_catcher, double, fortune, mini_wheel)`
        });
    }
    if(!game.gamesData[context.peerId].convData.isActive) return;
}
if(context.text.includes('timer') && context.isChat || context.text.includes('Timer') && context.isChat) {
	if(!game.gamesData[context.peerId].convData.isActive) return;
	if(context.senderId == game.gamesData[context.peerId].convOwner){
	let time = context.text.split(' ')[1];
     	time = util.rewrite_numbers(time)
				if(Number(time) > 120){
						return context.send(`‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –±–µ—Å–µ–¥–µ - 120 —Å–µ–∫—É–Ω–¥`)
				}
				if(Number(time) < 1){
						return context.send(`‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –±–µ—Å–µ–¥–µ - 1 —Å–µ–∫—É–Ω–¥–∞`)
				}
				if(isNaN(time)){
						return context.send(`‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ`)
				}
				if(game.gamesData[context.peerId].convGame.amount >= 1) {
					game.gamesData[context.peerId].convSettings.maxTime = Number(time)
					return context.send(`–í—Ä–µ–º—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞—É–Ω–¥–∞.`)
				}
				game.gamesData[context.peerId].convGame.timeNow = Number(time)
				game.gamesData[context.peerId].convSettings.maxTime = Number(time)
				return context.send(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —Ä–∞—É–Ω–¥–∞, ${time} —Å–µ–∫.`)
			}
	}
if(context.text == 'stats' && context.isChat || context.text == 'Stats' && context.isChat) {
			let top = []
            let topme = []
            let my = 0
            for (let i in game.gamesData[context.peerId].convData.userStatisticsBet.betDay) {
                top.push({
                    id: game.gamesData[context.peerId].convData.userStatisticsBet.betDay[i].id,
                    name: game.gamesData[context.peerId].convData.userStatisticsBet.betDay[i].name,
                    win: game.gamesData[context.peerId].convData.userStatisticsBet.betDay[i].bet
                })
            }
            const find = () => {
                let pos = 1000;
                for (let i = 0; i < top.length; i++) {
                    if (top[i].id === context.senderId) return pos = i;
                }
                return pos;
            }
            top.sort(function (a, b) {
                if (b.win > a.win) return 1
                if (b.win < a.win) return -1
                return 0
            });
            let text = ""
            for (let s = 0; s < top.length; s++) {
                topme.push(top[s].id)
            }
            if (top.length < 10) {
                for (let j = 0; j < top.length; j++) {
                    my += Number(1)
                    text += `${my}) ${player.playersData[top[j].id].mark}[id${player.playersData[top[j].id].id}|${player.playersData[top[j].id].name}]${player.playersData[top[j].id].mark} - –ø–æ—Å—Ç–∞–≤–∏–ª ${util.number_format(top[j].win)} –∫–æ–∏–Ω–æ–≤\n`
                }
            } else {
                for (let j = 0; j < 10; j++) {
                    my += Number(1)
                    text += `${my}) ${player.playersData[top[j].id].mark}[id${player.playersData[top[j].id].id}|${player.playersData[top[j].id].name}]${player.playersData[top[j].id].mark} - –ø–æ—Å—Ç–∞–≤–∏–ª ${util.number_format(top[j].win)} –∫–æ–∏–Ω–æ–≤\n`
                }
            }
            let users = 0
           for(i in game.gamesData[context.peerId].convData.userStatisticsBet.betDay) {
        		users++
			}
			if(text == "") {
			return context.send({
                message: `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ—Å–µ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\nüí∞ –°—Ç–∞–≤–æ–∫: ${util.number_format(game.gamesData[context.peerId].convData.userStatisticsBet.amountDay)} RDC\nüë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: –ê –∏—Ö –Ω–µ—Ç—É –∫—Å—Ç–∞—Ç–∏.\n\n${text}`,
                reply_to: context.id,
                keyboard: Keyboard.builder()
        		.textButton({ label: `–î–µ–Ω—å `, payload: { command: 'conversation_day'}, color: 'positive'})
        		.textButton({ label: `–ù–µ–¥–µ–ª—è `, payload: { command: 'conversation_week'}, color: 'positive'}).row()
        		.textButton({ label: `–í—Å—ë –≤—Ä–µ–º—è`, payload: { command: 'conversation_all'}, color: 'positive'})
        		.inline()
				})
			}
            return context.send({
                message: `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ—Å–µ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\nüí∞ –°—Ç–∞–≤–æ–∫: ${util.number_format(game.gamesData[context.peerId].convData.userStatisticsBet.amountDay)} RDC\nüí∏ –ü—Ä–∏–±—ã–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞: ${util.number_format(game.gamesData[context.peerId].convData.admin_earn)} RDC\nüë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: ${users}\n\n${text}`,
                reply_to: context.id,
                keyboard: Keyboard.builder()
        		.textButton({ label: `–î–µ–Ω—å `, payload: { command: 'conversation_day'}, color: 'positive'})
        		.textButton({ label: `–ù–µ–¥–µ–ª—è `, payload: { command: 'conversation_week'}, color: 'positive'}).row()
        		.textButton({ label: `–í—Å—ë –≤—Ä–µ–º—è`, payload: { command: 'conversation_all'}, color: 'positive'})
        		.inline()
				})
}
if(!context.messagePayload) return
if(context.messagePayload.command == 'conversation_day' ) {
            let top = []
            let topme = []
            let my = 0
            for (let i in game.gamesData[context.peerId].convData.userStatisticsBet.betDay) {
                top.push({
                    id: game.gamesData[context.peerId].convData.userStatisticsBet.betDay[i].id,
                    name: game.gamesData[context.peerId].convData.userStatisticsBet.betDay[i].name,
                    win: game.gamesData[context.peerId].convData.userStatisticsBet.betDay[i].bet
                })
            }
            const find = () => {
                let pos = 1000;
                for (let i = 0; i < top.length; i++) {
                    if (top[i].id === context.senderId) return pos = i;
                }
                return pos;
            }
            top.sort(function (a, b) {
                if (b.win > a.win) return 1
                if (b.win < a.win) return -1
                return 0
            });
            let text = ""
            for (let s = 0; s < top.length; s++) {
                topme.push(top[s].id)
            }
            if (top.length < 10) {
                for (let j = 0; j < top.length; j++) {
                    my += Number(1)
                    text += `${my}) ${player.playersData[top[j].id].mark}[id${player.playersData[top[j].id].id}|${player.playersData[top[j].id].name}]${player.playersData[top[j].id].mark} - –ø–æ—Å—Ç–∞–≤–∏–ª ${util.number_format(top[j].win)} –∫–æ–∏–Ω–æ–≤\n`
                }
            } else {
                for (let j = 0; j < 10; j++) {
                    my += Number(1)
                    text += `${my}) ${player.playersData[top[j].id].mark}[id${player.playersData[top[j].id].id}|${player.playersData[top[j].id].name}]${player.playersData[top[j].id].mark} - –ø–æ—Å—Ç–∞–≤–∏–ª ${util.number_format(top[j].win)} –∫–æ–∏–Ω–æ–≤\n`
                }
            }
            let users = 0
           for(i in game.gamesData[context.peerId].convData.userStatisticsBet.betDay) {
        		users++
			}
			if(text == "") {
			return context.send({
                message: `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ—Å–µ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\nüí∞ –°—Ç–∞–≤–æ–∫: ${util.number_format(game.gamesData[context.peerId].convData.userStatisticsBet.amountDay)} RDC\nüë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: –ê –∏—Ö –Ω–µ—Ç—É –∫—Å—Ç–∞—Ç–∏.\n\n`,
                reply_to: context.id,
                keyboard: Keyboard.builder()
        		.textButton({ label: `–î–µ–Ω—å `, payload: { command: 'conversation_day'}, color: 'positive'})
        		.textButton({ label: `–ù–µ–¥–µ–ª—è `, payload: { command: 'conversation_week'}, color: 'positive'}).row()
        		.textButton({ label: `–í—Å—ë –≤—Ä–µ–º—è`, payload: { command: 'conversation_all'}, color: 'positive'})
        		.inline()
				})
			}
            return context.send({
                message: `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ—Å–µ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\nüí∞ –°—Ç–∞–≤–æ–∫: ${util.number_format(game.gamesData[context.peerId].convData.userStatisticsBet.amountDay)} RDC\nüí∏ –ü—Ä–∏–±—ã–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞: ${util.number_format(game.gamesData[context.peerId].convData.admin_earn)} RDC\nüë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: ${users}\n\n${text}`,
                reply_to: context.id,
                keyboard: Keyboard.builder()
        		.textButton({ label: `–î–µ–Ω—å `, payload: { command: 'conversation_day'}, color: 'positive'})
        		.textButton({ label: `–ù–µ–¥–µ–ª—è `, payload: { command: 'conversation_week'}, color: 'positive'}).row()
        		.textButton({ label: `–í—Å—ë –≤—Ä–µ–º—è`, payload: { command: 'conversation_all'}, color: 'positive'})
        		.inline()
				})
}
if(context.messagePayload.command == 'conversation_week' ) {
	let top = []
            let topme = []
            let my = 0
            for (let i in game.gamesData[context.peerId].convData.userStatisticsBet.betWeek) {
                top.push({
                    id: game.gamesData[context.peerId].convData.userStatisticsBet.betWeek[i].id,
                    name: game.gamesData[context.peerId].convData.userStatisticsBet.betWeek[i].name,
                    win: game.gamesData[context.peerId].convData.userStatisticsBet.betWeek[i].bet
                })
            }
            const find = () => {
                let pos = 1000;
                for (let i = 0; i < top.length; i++) {
                    if (top[i].id === context.senderId) return pos = i;
                }
                return pos;
            }
            top.sort(function (a, b) {
                if (b.win > a.win) return 1
                if (b.win < a.win) return -1
                return 0
            });
            let text = ""
            for (let s = 0; s < top.length; s++) {
                topme.push(top[s].id)
            }
            if (top.length < 10) {
                for (let j = 0; j < top.length; j++) {
                    my += Number(1)
                    text += `${my}) ${player.playersData[top[j].id].mark}[id${player.playersData[top[j].id].id}|${player.playersData[top[j].id].name}]${player.playersData[top[j].id].mark} - –ø–æ—Å—Ç–∞–≤–∏–ª ${util.number_format(top[j].win)} –∫–æ–∏–Ω–æ–≤\n`
                }
            } else {
                for (let j = 0; j < 10; j++) {
                    my += Number(1)
                    text += `${my}) ${player.playersData[top[j].id].mark}[id${player.playersData[top[j].id].id}|${player.playersData[top[j].id].name}]${player.playersData[top[j].id].mark} - –ø–æ—Å—Ç–∞–≤–∏–ª ${util.number_format(top[j].win)} –∫–æ–∏–Ω–æ–≤\n`
                }
            }
            let users = 0
           for(i in game.gamesData[context.peerId].convData.userStatisticsBet.betWeek) {
        		users++
			}
			if(text == "") {
			return context.send({
                message: `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ—Å–µ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é:\n\nüí∞ –°—Ç–∞–≤–æ–∫: ${util.number_format(game.gamesData[context.peerId].convData.userStatisticsBet.amountWeek)} RDC\nüë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: –ê –∏—Ö –Ω–µ—Ç—É –∫—Å—Ç–∞—Ç–∏\n\n`,
                reply_to: context.id,
                keyboard: Keyboard.builder()
        		.textButton({ label: `–î–µ–Ω—å `, payload: { command: 'conversation_day'}, color: 'positive'})
        		.textButton({ label: `–ù–µ–¥–µ–ª—è `, payload: { command: 'conversation_week'}, color: 'positive'}).row()
        		.textButton({ label: `–í—Å—ë –≤—Ä–µ–º—è`, payload: { command: 'conversation_all'}, color: 'positive'})
        		.inline()
				})
			}
            return context.send({
                message: `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ—Å–µ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é:\n\nüí∞ –°—Ç–∞–≤–æ–∫: ${util.number_format(game.gamesData[context.peerId].convData.userStatisticsBet.amountWeek)} RDC\nüë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: ${users}\n\n${text}`,
                reply_to: context.id,
                keyboard: Keyboard.builder()
        		.textButton({ label: `–î–µ–Ω—å `, payload: { command: 'conversation_day'}, color: 'positive'})
        		.textButton({ label: `–ù–µ–¥–µ–ª—è `, payload: { command: 'conversation_week'}, color: 'positive'}).row()
        		.textButton({ label: `–í—Å—ë –≤—Ä–µ–º—è`, payload: { command: 'conversation_all'}, color: 'positive'})
        		.inline()
				})
}
if(context.messagePayload.command == 'conversation_all' ) {
	let top = []
            let topme = []
            let my = 0
            for (let i in game.gamesData[context.peerId].convData.userStatisticsBet.betAll) {
                top.push({
                    id: game.gamesData[context.peerId].convData.userStatisticsBet.betAll[i].id,
                    name: game.gamesData[context.peerId].convData.userStatisticsBet.betAll[i].name,
                    win: game.gamesData[context.peerId].convData.userStatisticsBet.betAll[i].bet
                })
            }
            const find = () => {
                let pos = 1000;
                for (let i = 0; i < top.length; i++) {
                    if (top[i].id === context.senderId) return pos = i;
                }
                return pos;
            }
            top.sort(function (a, b) {
                if (b.win > a.win) return 1
                if (b.win < a.win) return -1
                return 0
            });
            let text = ""
            for (let s = 0; s < top.length; s++) {
                topme.push(top[s].id)
            }
            if (top.length < 10) {
                for (let j = 0; j < top.length; j++) {
                    my += Number(1)
                    text += `${my}) ${player.playersData[top[j].id].mark}[id${player.playersData[top[j].id].id}|${player.playersData[top[j].id].name}]${player.playersData[top[j].id].mark} - –ø–æ—Å—Ç–∞–≤–∏–ª ${util.number_format(top[j].win)} –∫–æ–∏–Ω–æ–≤\n`
                }
            } else {
                for (let j = 0; j < 10; j++) {
                    my += Number(1)
                    text += `${my}) ${player.playersData[top[j].id].mark}[id${player.playersData[top[j].id].id}|${player.playersData[top[j].id].name}]${player.playersData[top[j].id].mark} - –ø–æ—Å—Ç–∞–≤–∏–ª ${util.number_format(top[j].win)} –∫–æ–∏–Ω–æ–≤\n`
                }
            }
            let users = 0
           for(i in game.gamesData[context.peerId].convData.userStatisticsBet.betAll) {
        		users++
			}
			if(text == "") {
			return context.send({
                message: `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ—Å–µ–¥—ã –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:\n\nüí∞ –°—Ç–∞–≤–æ–∫: ${util.number_format(game.gamesData[context.peerId].convData.userStatisticsBet.amountAll)} RDC\nüë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: –ê –∏—Ö –Ω–µ—Ç—É –∫—Å—Ç–∞—Ç–∏\n\n`,
                reply_to: context.id,
                keyboard: Keyboard.builder()
        		.textButton({ label: `–î–µ–Ω—å `, payload: { command: 'conversation_day'}, color: 'positive'})
        		.textButton({ label: `–ù–µ–¥–µ–ª—è `, payload: { command: 'conversation_week'}, color: 'positive'}).row()
        		.textButton({ label: `–í—Å—ë –≤—Ä–µ–º—è`, payload: { command: 'conversation_all'}, color: 'positive'})
        		.inline()
				})
			}
            return context.send({
                message: `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ—Å–µ–¥—ã –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:\n\nüí∞ –°—Ç–∞–≤–æ–∫: ${util.number_format(game.gamesData[context.peerId].convData.userStatisticsBet.amountAll)} RDC\nüë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: ${users}\n\n${text}`,
                reply_to: context.id,
                keyboard: Keyboard.builder()
        		.textButton({ label: `–î–µ–Ω—å `, payload: { command: 'conversation_day'}, color: 'positive'})
        		.textButton({ label: `–ù–µ–¥–µ–ª—è `, payload: { command: 'conversation_week'}, color: 'positive'}).row()
        		.textButton({ label: `–í—Å—ë –≤—Ä–µ–º—è`, payload: { command: 'conversation_all'}, color: 'positive'})
        		.inline()
				})
}
}